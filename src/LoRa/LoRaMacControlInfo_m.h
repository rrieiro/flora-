//
// Generated file, do not edit! Created by nedtool 5.5 from LoRa/LoRaMacControlInfo.msg.
//

#ifndef __INET_LORAMACCONTROLINFO_M_H
#define __INET_LORAMACCONTROLINFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0505
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "../misc/DevAddr.h"
#include <inet/common/Units.h>
// }}


namespace inet {

/**
 * Class generated from <tt>LoRa/LoRaMacControlInfo.msg:30</tt> by nedtool.
 * <pre>
 * class LoRaMacControlInfo
 * {
 *     DevAddr src;  // src DevAddr address (can be left empty when sending)
 *     DevAddr dest; // dest DevAddr address
 * 
 *     double LoRaTP;
 *     inet::units::values::Hz LoRaCF;
 *     int LoRaSF;
 *     inet::units::values::Hz LoRaBW;
 *     int LoRaCR;
 *     bool LoRaUseHeader;
 * }
 * </pre>
 */
class LoRaMacControlInfo : public ::omnetpp::cObject
{
  protected:
    DevAddr src;
    DevAddr dest;
    double LoRaTP;
    inet::units::values::Hz LoRaCF;
    int LoRaSF;
    inet::units::values::Hz LoRaBW;
    int LoRaCR;
    bool LoRaUseHeader;

  private:
    void copy(const LoRaMacControlInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LoRaMacControlInfo&);

  public:
    LoRaMacControlInfo();
    LoRaMacControlInfo(const LoRaMacControlInfo& other);
    virtual ~LoRaMacControlInfo();
    LoRaMacControlInfo& operator=(const LoRaMacControlInfo& other);
    virtual LoRaMacControlInfo *dup() const override {return new LoRaMacControlInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual DevAddr& getSrc();
    virtual const DevAddr& getSrc() const {return const_cast<LoRaMacControlInfo*>(this)->getSrc();}
    virtual void setSrc(const DevAddr& src);
    virtual DevAddr& getDest();
    virtual const DevAddr& getDest() const {return const_cast<LoRaMacControlInfo*>(this)->getDest();}
    virtual void setDest(const DevAddr& dest);
    virtual double getLoRaTP() const;
    virtual void setLoRaTP(double LoRaTP);
    virtual inet::units::values::Hz& getLoRaCF();
    virtual const inet::units::values::Hz& getLoRaCF() const {return const_cast<LoRaMacControlInfo*>(this)->getLoRaCF();}
    virtual void setLoRaCF(const inet::units::values::Hz& LoRaCF);
    virtual int getLoRaSF() const;
    virtual void setLoRaSF(int LoRaSF);
    virtual inet::units::values::Hz& getLoRaBW();
    virtual const inet::units::values::Hz& getLoRaBW() const {return const_cast<LoRaMacControlInfo*>(this)->getLoRaBW();}
    virtual void setLoRaBW(const inet::units::values::Hz& LoRaBW);
    virtual int getLoRaCR() const;
    virtual void setLoRaCR(int LoRaCR);
    virtual bool getLoRaUseHeader() const;
    virtual void setLoRaUseHeader(bool LoRaUseHeader);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LoRaMacControlInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LoRaMacControlInfo& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_LORAMACCONTROLINFO_M_H

